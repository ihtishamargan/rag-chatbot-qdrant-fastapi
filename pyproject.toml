[project]
name = "rag-chatbot-qdrant-fastapi"
version = "0.1"
description = "Default template for PDM package"
authors = [
    {name = "Ihtisham Ahmad", email = "ihtishamargan@gmail.com"},
]
dependencies = [
    "google-api-python-client>=2.125.0",
    "google-auth-httplib2>=0.2.0",
    "google-auth-oauthlib>=1.2.0",
    "langchain>=0.1.14",
    "python-dotenv>=1.0.1",
    "tensorflow-hub>=0.16.1",
    "unstructured[all-docs]>=0.11.8",
    "openai>=1.16.2",
    "tiktoken>=0.6.0",
    "pypdf2>=3.0.1",
    "qdrant-client>=1.8.2",
    "cryptography>=42.0.5",
    "langchain-openai>=0.1.1",
    "fastapi>=0.110.1",
    "pytest>=8.1.1",
    "httpx>=0.27.0",
    "uvicorn>=0.29.0",
    "networkx>=3.3",
    "gspread>=6.1.0",
    "pandas>=2.2.1",
    "oauth2client>=4.1.3",
    "pydantic>=2.6.4",
    "langchain-community>=0.2.7",
]
requires-python = "==3.12.*"
readme = "README.md"
license = {text = "MIT"}


[tool.pdm]
distribution = false

[tool.pdm.dev-dependencies]
dev = [
    "ipykernel>=6.29.4",
    "pre-commit>=3.7.0",
    "pytest>=8.1.1",
]

[tool.pdm.scripts]
# lifecycle hooks
post_install = "pre-commit install && pre-commit install --hook-type commit-msg"
# scripts
lint = "pre-commit run --all-files"
start.cmd = "uvicorn src.app:app --reload"
start.env_file = ".env"
test.cmd = "pytest"
test.env_file = ".env"

# linters configuration below
[tool.ruff]
line-length = 120
target-version = "py311"
lint.select = [
    "A", # flake8-builtins
    "B", # flake8-bugbear
    "BLE", # flake8-blind-except
    "C4", # flake8-comprehensions
    "C90", # mccabe
    "D", # pydocstyle
    "DJ", # flake8-django
    "DTZ", # flake8-datetimez
    "E", # pycodestyle errors
    "ERA", # eradicate
    "EXE", # flake8-executable
    "F", # pyflakes
    "G", # flake8-logging-format
    "I", # isort
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    "N", # pep8-naming
    "PIE", # flake8-pie
    "PLC", # pylint - convention
    "PLE", # pylint - error
    "PLW", # pylint - warning
    "Q", # flake8-quotes
    "RET", # flake8-return
    "RUF", # Ruff-specific rules
    "S", # flake8-bandit
    "SIM", # flake8-simplify
    "T10", # flake8-debugger
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP", # pyupgrade
    "W", # pycodestyle - warning
    "YTT", # flake8-2020
]
lint.ignore = [
    "A003", # flake8-builtins - class attribute {name} is shadowing a python builtin
    "B008", # bugbear - function call parameters init
    "D100", # pydocstyle - missing docstring in public module
    "D101", # pydocstyle - missing docstring in public class
    "D102", # pydocstyle - missing docstring in public method
    "D103", # pydocstyle - missing docstring in public function
    "D104", # pydocstyle - missing docstring in public package
    "D105", # pydocstyle - missing docstring in magic method
    "D106", # pydocstyle - missing docstring in public nested class
    "D107", # pydocstyle - missing docstring in __init__
    "D202", # pydocstyle - no blank lines allowed after function docstring
    "D205", # pydocstyle - 1 blank line required between summary line and description
    "D415", # pydocstyle - first line should end with a period, question mark, or exclamation point
    "E501", # pycodestyle line too long, handled by ruff format
    "ISC001", # ruff formatter incompatible
]
src = ["src", "tests"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.*" = [
    "A",
    "ARG",
    "B",
    "BLE",
    "C901",
    "D",
    "DTZ",
    "EM",
    "FBT",
    "G",
    "N",
    "PGH",
    "PIE",
    "PLR",
    "PLW",
    "RSE",
    "S",
    "S101",
    "SIM",
    "TCH",
    "TRY",
]

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 120

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.mypy]
plugins = [
    "pydantic.mypy"
]
packages = ["src", "tests"]
python_version = "3.11"
disallow_any_generics = false
disallow_untyped_decorators = true
implicit_reexport = false
show_error_codes = true
strict = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
